const fs = require('fs');
const path = require('path');
const lockfile = require('proper-lockfile');
const { normalize } = require('./normalize');
const fuzz = require('fuzzball');

const DB_PATH = path.join(__dirname, 'seen_castings_texts.json');
const SIMILARITY_THRESHOLD = 90;

async function isDuplicateCasting(text = '', ocrText = '') {
    const normText = normalize(text || '');
    const normOcr = normalize(ocrText || '');
    const entriesToCheck = [normText, normOcr].filter(Boolean);

    if (!fs.existsSync(DB_PATH)) {
        fs.writeFileSync(DB_PATH, JSON.stringify([]));
    }

    let release;
    try {
        // ‚õìÔ∏è –°—Ç–∞–≤–∏–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–æ–∫
        release = await lockfile.lock(DB_PATH, { retries: 3 });

        let seen;
        try {
            seen = JSON.parse(fs.readFileSync(DB_PATH, 'utf-8'));
        } catch (err) {
            console.error('‚ùå –ü–æ–≤—Ä–µ–∂–¥—ë–Ω JSON —Ñ–∞–π–ª –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', err.message);
            seen = [];
        }

        // 1Ô∏è‚É£ –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for (const entry of entriesToCheck) {
            if (seen.includes(entry)) {
                console.log("üîÅ –ù–∞–π–¥–µ–Ω —Ç–æ—á–Ω—ã–π –¥—É–±–ª–∏–∫–∞—Ç");
                return true;
            }
        }

        // 2Ô∏è‚É£ Fuzzy —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        for (const entry of seen) {
            for (const check of entriesToCheck) {
                const ratio = fuzz.token_set_ratio(entry, check);
                if (ratio >= SIMILARITY_THRESHOLD) {
                    console.log(`‚ö†Ô∏è Fuzzy –¥—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω: —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ${ratio}%`);
                    return true;
                }
            }
        }

        // üíæ –î–æ–±–∞–≤–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        for (const item of entriesToCheck) {
            if (!seen.includes(item)) {
                seen.push(item);
            }
        }

        fs.writeFileSync(DB_PATH, JSON.stringify(seen.slice(-20), null, 2), 'utf-8');
        return false;

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', err.message);
        return false;

     } finally {
        if (release) {
            try {
                await release(); // –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–∫—Ä—ã—Ç—å –ª–æ–∫ –∏ —É–¥–∞–ª–∏—Ç—å .lock
            } catch (err) {
                console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ª–æ–∫–∞:", err.message);
            }
        }
    }
}
module.exports = { isDuplicateCasting };