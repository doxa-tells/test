from telethon import TelegramClient, events
from PIL import Image
import os
from dotenv import load_dotenv
import requests
import base64
from openai import OpenAI
import pytesseract
pytesseract.pytesseract.tesseract_cmd = '/opt/homebrew/bin/tesseract'
import json
from shared.isDuplicateCasting import is_duplicate_casting
from shared.ocr_extractor import extract_text_from_image
from telegram_bot.format_casting_template import format_casting_template
from telegram_bot.is_casting_ai import is_casting_ai

# üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()

api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
bot_token = os.getenv("BOT_TOKEN")
chat_id = int(os.getenv("DESTINATION_CHAT_ID"))
thread_id = int(os.getenv("DESTINATION_THREAD_ID"))
openai_key = os.getenv("OPENAI_API_KEY")

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
client = TelegramClient("mirror_session", api_id, api_hash)
openai_client = OpenAI(api_key=openai_key)

# üéØ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫: "chatId_threadId"
source_threads = {
    "-1002712928305_3",  # —Ç–µ—Å—Ç —Ç–æ–ø–∏–∫
    "-1001343083522_40014"  # –¥–æ–±—Ä—ã–µ –∫–∏–Ω–æ—à–Ω–∏–∫–∏
}

# üì£ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –±–µ–∑ —Ç–µ–º
source_without_topic = [
    -4690232474,   # —Ç–µ—Å—Ç –≥—Ä—É–ø–ø–∞
    -1002867564870,# —Ç–µ—Å—Ç –∫–∞–Ω–∞–ª
    -1001185887859,# aktery.castingi.modeling
    -1001496435905,# –∫–∞—Å—Ç–∏–Ω–≥–∏ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω –∞–ª–º–∞—Ç—ã
    -1001558970072,# –∞–∫—Ç–µ—Ä—ã –±–∞–∑–∞ #1
    -1001228544389,# —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—Å—Ç–æ–≤
    -1001283285008,# –≤—Å–µ –æ –∫–∏–Ω–æ
    -1002637607696,# kazakhstan casting club(astana)
    -1002692826194,# ¬´—Å–æ–ª–Ω–µ—á–Ω—ã–π –≤–µ—Ç–µ—Ä¬ª
    -1002111636925,# –∫–∞—Å—Ç–∏–Ω–≥ –≤ –∞—Å—Ç–∞–Ω–µ
    -1002222308517 # zhaniya kaz casting hub
]

# üõÅ –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
all_sources = list({int(s.split('_')[0]) for s in source_threads}) + source_without_topic

# üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@client.on(events.NewMessage(chats=all_sources))
async def handler(event):
    try:
        message = event.message

        # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        chat_id_only = event.chat_id
        actual_thread_id = (
            getattr(message, 'thread_id', None)
            or getattr(message, 'message_thread_id', None)
            or (message.reply_to.reply_to_msg_id if message.reply_to else None)
        )
        chat_id_str = f"{chat_id_only}_{actual_thread_id}"

        if chat_id_only in source_without_topic:
            print(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ –±–µ–∑ —Ç–µ–º—ã: {chat_id_only}")
        elif chat_id_str in source_threads:
            print(f"‚úÖ –ü—Ä–æ—Ö–æ–¥–∏—Ç —Ñ–∏–ª—å—Ç—Ä: {chat_id_str}")
        else:
            print(f"‚ùå {chat_id_str} –Ω–µ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return

        text = (getattr(message, 'message', '') or
                getattr(message, 'text', '') or
                getattr(message, 'raw_text', ''))
        sender = await event.get_chat()
        sender_name = getattr(sender, 'title', '–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
        print(f"\nüìÖ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑: {sender_name}")
        if text:
            print(f"üìù –¢–µ–∫—Å—Ç: {text[:100]}...")

        image_path = None
        if message.photo:
            print("üì∑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º...")
            image_path = await message.download_media()
            print(f"‚¨áÔ∏è –°–∫–∞—á–∞–Ω–æ: {image_path}")

            # üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç preview Telegram (—Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ/–ª—ë–≥–∫–∏–µ)
            if image_path:
                file_size = os.path.getsize(image_path)
                try:
                    with Image.open(image_path) as img:
                        width, height = img.size
                except:
                    width, height = 0, 0

                if file_size < 15000 or (width <= 150 and height <= 150):
                    print(f"‚ö†Ô∏è –§–æ—Ç–æ ‚Äî Telegram preview ({width}x{height}, {file_size} bytes). –£–¥–∞–ª—è–µ–º.")
                    os.remove(image_path)
                    image_path = None

        is_casting = await is_casting_ai(text, image_path)
        if not is_casting:
            print("‚ùå –ù–µ –∫–∞—Å—Ç–∏–Ω–≥")
            if image_path:
                os.remove(image_path)
            return
        print("‚úÖ –ö–∞—Å—Ç–∏–Ω–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")

        # üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –ø–æ —Ç–µ–∫—Å—Ç—É + OCR
        ocr_text = extract_text_from_image(image_path) if image_path else ''
        if is_duplicate_casting(text, ocr_text):
            print("üîÅ –ö–∞—Å—Ç–∏–Ω–≥ —É–∂–µ –±—ã–ª. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            if image_path:
                os.remove(image_path)
            return

        # üñºÔ∏è –õ–æ–≥–∏–∫–∞ ‚Äú–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ‚Äù
        triggers = [
            "–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ", "–∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ", "–∫–∞–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏",
            "—Å–º. —Ñ–æ—Ç–æ", "—Å–º–æ—Ç—Ä–∏ —Ñ–æ—Ç–æ", "—Å–º. –∫–∞—Ä—Ç–∏–Ω–∫—É",
            "like the photo", "as in the photo", "see photo"
        ]
        lc_text = (text or "").lower()
        lc_ocr = (ocr_text or "").lower()
        keep_photo = any(t in lc_text for t in triggers) or any(t in lc_ocr for t in triggers)

        # ‚ú® –®–∞–±–ª–æ–Ω
        formatted = await format_casting_template(text, image_path)

        # üí¨ –¶–∏—Ç–∞—Ç–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        quote_html = f"<blockquote>–ò—Å—Ç–æ—á–Ω–∏–∫(Telegram): {sender_name}</blockquote>"
        final_message = f"{formatted}\n\n{quote_html}"

        # üîó –†–ï–®–ï–ù–ò–ï: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–∞–ø—à–µ–Ω–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if image_path and keep_photo:
            print("üñºÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω —Å —Ñ–æ—Ç–æ (caption).")
            url = f"https://api.telegram.org/bot{bot_token}/sendPhoto"
            with open(image_path, 'rb') as img_file:
                files = {"photo": img_file}
                data = {
                    "chat_id": chat_id,
                    "message_thread_id": thread_id,
                    "caption": final_message,
                    "parse_mode": "HTML"
                }
                resp = requests.post(url, data=data, files=files, timeout=30)
            print(f"üì§ –§–æ—Ç–æ+–∫–∞–ø—à–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –°—Ç–∞—Ç—É—Å: {resp.status_code}")
        else:
            # –∫–∞–∫ —Ä–∞–Ω—å—à–µ ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            data = {
                "chat_id": chat_id,
                "message_thread_id": thread_id,
                "text": final_message,
                "parse_mode": "HTML"
            }
            resp = requests.post(
                f"https://api.telegram.org/bot{bot_token}/sendMessage",
                json=data, timeout=30
            )
            print(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –°—Ç–∞—Ç—É—Å: {resp.status_code}")

        if image_path:
            try:
                os.remove(image_path)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ: {e}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –°–ª—É—à–∞–µ–º –∫–∞—Å—Ç–∏–Ω–≥–∏...")
client.start()
client.run_until_disconnected()
