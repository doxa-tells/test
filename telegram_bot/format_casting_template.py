import base64
from openai import OpenAI
from dotenv import load_dotenv
import os

load_dotenv()  # –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# üîπ –ú–∞—Ä–∫–µ—Ä—ã –æ—Ç–∫–∞–∑–∞
REFUSAL_MARKERS = [
    # –∞–Ω–≥–ª.
    "i'm sorry", "im sorry", "sorry", "i cannot", "i can't", "i wont", "i won't",
    "i am unable", "i'm unable", "unable to", "not able to", "as an ai", "i am an ai",
    "i cannot help", "can't help", "i cannot provide", "i can't provide",
    "this content is not allowed", "cannot comply", "i must refuse",
    # —Ä—É—Å.
    "–∏–∑–≤–∏–Ω–∏—Ç–µ", "–∏–∑–≤–∏–Ω—è—é—Å—å", "–ø—Ä–æ—Å—Ç–∏—Ç–µ", "–∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é",
    "–Ω–µ –º–æ–≥—É", "–Ω–µ —Å–º–æ–≥—É", "–Ω–µ –±—É–¥—É", "—è –Ω–µ –º–æ–≥—É", "—è –Ω–µ –±—É–¥—É",
    "—è –Ω–µ –∏–º–µ—é –ø—Ä–∞–≤–∞", "–Ω–µ –∏–º–µ—é –ø—Ä–∞–≤–∞", "–Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å", "–Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å",
]
MAX_ATTEMPTS = 10


async def format_casting_template(text, image_path=None):
    base_content = [
        {
            "type": "text",
            "text": f"""–¢—ã –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Å—Ç–∏–Ω–≥ –≤ –µ–¥–∏–Ω—ã–π —à–∞–±–ª–æ–Ω. 
–¢–û–õ–¨–ö–û –®–ê–ë–õ–û–ù, –ë–ï–ó –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π, –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–æ —à–∞–≥–∞–º:
‚Äî –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
‚Äî –ï—Å–ª–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ –Ω–∞ –Ω—ë–º –µ—Å—Ç—å —Ç–µ–∫—Å—Ç ‚Äî —É—á—Ç–∏ –µ–≥–æ.
‚Äî –ï—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–π.
‚Äî –ò–≥–Ω–æ—Ä–∏—Ä—É–π –≤–∏–∑—É–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –ª–∏—Ü–∞, —Ñ–æ–Ω –∏ —Ç.–¥., –ù–û –ù–ï –¢–ï–ö–°–¢!

–§–æ—Ä–º–∞—Ç —à–∞–±–ª–æ–Ω–∞:
üé® –ü—Ä–æ–µ–∫—Ç: [–Ω–∞–∑–≤–∞–Ω–∏–µ/—Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞]  
üë§ –†–æ–ª—å/–¢–∏–ø–∞–∂: [–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏]  
üóì –î–∞—Ç–∞ —Å—ä—ë–º–æ–∫: [–¥–∞—Ç–∞]  
‚è∞ –í—Ä–µ–º—è: [–≤—Ä–µ–º—è]  
üí∞ –ì–æ–Ω–æ—Ä–∞—Ä: [—Å—É–º–º–∞]  
üìç –õ–æ–∫–∞—Ü–∏—è: [–≥–æ—Ä–æ–¥/–º–µ—Å—Ç–æ]  
üì¨ –ö–æ–Ω—Ç–∞–∫—Ç: [—Å—Å—ã–ª–∫–∞/–Ω–∏–∫–Ω–µ–π–º]  
üìù –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: [–≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ]

–ï—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –ø–æ–ª–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî —Å—Ç–∞–≤—å –ø—Ä–æ—á–µ—Ä–∫ "-".

–í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ:
{text}
"""
        }
    ]

    if image_path:
        try:
            with open(image_path, "rb") as img:
                base64_img = base64.b64encode(img.read()).decode("utf-8")
            base_content.append({
                "type": "image_url",
                "image_url": {
                    "url": f"data:image/jpeg;base64,{base64_img}",
                    "detail": "low"
                }
            })
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —à–∞–±–ª–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

    attempt = 1
    while attempt <= MAX_ATTEMPTS:
        try:
            print(f"üîÅ –ü–æ–ø—ã—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è #{attempt}")
            response = openai_client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": base_content}],
                max_tokens=1000
            )
            result = response.choices[0].message.content.strip()
            rl = result.lower()

            if result and not any(marker in rl for marker in REFUSAL_MARKERS):
                return result
            else:
                print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –æ—Ç–∫–∞–∑/–∏–∑–≤–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –ü–æ–≤—Ç–æ—Ä—è–µ–º...")
                attempt += 1

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return text

    # –ï—Å–ª–∏ –∑–∞ MAX_ATTEMPTS GPT —Ç–∞–∫ –∏ –Ω–µ –¥–∞–ª –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    return text