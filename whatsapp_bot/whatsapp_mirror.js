const { Client, LocalAuth } = require('whatsapp-web.js');
const { isCastingAI } = require('./isCastingAI');
const { formatCastingTemplate } = require('./formatCastingTemplate');
const { extractTextFromImage } = require('../shared/ocr_extractor');
const { isDuplicateCasting } = require('../shared/isDuplicateCasting');

const qrcode = require('qrcode-terminal');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
const FormData = require('form-data'); // üëà –¥–ª—è sendPhoto
require('dotenv').config();

function escapeHtml(text) {
  return (text || '')
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

const client = new Client({
  authStrategy: new LocalAuth(),
  puppeteer: {
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  }
});

// üì∏ QR –¥–ª—è –≤—Ö–æ–¥–∞
client.on('qr', (qr) => {
  console.log('üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ WhatsApp:');
  qrcode.generate(qr, { small: true });
});

// ‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤
client.on('ready', () => {
  console.log('‚úÖ WhatsApp Client is ready!');
});

// üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
client.on('message', async (message) => {
  const chat = await message.getChat();
  const contact = await message.getContact();

  if (!chat.isGroup) return;

  console.log(`\nüìÖ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑: ${chat.name}`);
  console.log(`üë§ –û—Ç: ${contact.pushname || contact.number}`);
  console.log(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${message.body || '[–ú–µ–¥–∏–∞]'}`);

  let text = message.body || '';
  let imagePath = null;

  // üì∑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º...
  if (message.hasMedia) {
    const media = await message.downloadMedia();
    if (media && media.mimetype.startsWith("image/")) {
      const buffer = Buffer.from(media.data, "base64");
      const fileName = `temp_${Date.now()}.jpg`;
      const filePath = path.join(__dirname, fileName);
      fs.writeFileSync(filePath, buffer);
      imagePath = filePath;
      console.log(`‚¨áÔ∏è –°–∫–∞—á–∞–Ω–æ: ${fileName}`);
    }
  }

  // ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ GPT-4o...
  const isCasting = await isCastingAI(text, imagePath);
  console.log("üß† AI –æ—Ç–≤–µ—Ç:", isCasting ? '–¥–∞' : '–Ω–µ—Ç');

  if (!isCasting) {
    console.log("‚ùå –ù–µ –∫–∞—Å—Ç–∏–Ω–≥. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.");
    if (imagePath && fs.existsSync(imagePath)) fs.unlinkSync(imagePath);
    return;
  }

  console.log("‚úÖ –ö–∞—Å—Ç–∏–Ω–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω");

  // üßæ OCR + –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
  const ocrText = imagePath ? await extractTextFromImage(imagePath) : '';
  if (await isDuplicateCasting(text, ocrText)) {
    console.log("üîÅ –ö–∞—Å—Ç–∏–Ω–≥ —É–∂–µ –±—ã–ª. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.");
    if (imagePath && fs.existsSync(imagePath)) fs.unlinkSync(imagePath);
    return;
  }

  // üîÅ –ü–æ–ø—ã—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è #1
  const formatted = await formatCastingTemplate(text, imagePath);

  // üè∑Ô∏è –¶–∏—Ç–∞—Ç–∞-–∏—Å—Ç–æ—á–Ω–∏–∫ (HTML)
  const sourceQuote = `<blockquote>–ò—Å—Ç–æ—á–Ω–∏–∫ (WhatsApp): ${escapeHtml(chat.name)}</blockquote>`;
  const finalMessage = `${formatted}\n\n${sourceQuote}`;

  // üñºÔ∏è –¢—Ä–∏–≥–≥–µ—Ä—ã ‚Äú—Ñ–æ—Ç–æ –≤–∞–∂–Ω–æ‚Äù ‚Äî –í–ê–†–ò–ê–ù–¢ –ë (–±–µ–∑ —Ä–µ–≥–µ–∫—Å–∞)
  const hay = `${text} ${ocrText}`.toLowerCase();
  const triggers = [
    '–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ', '–Ω–∞ —Ñ–æ—Ç–æ', '–∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ', '–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ', '–∫–∞–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏',
    '—Å–º —Ñ–æ—Ç–æ', '—Å–º. —Ñ–æ—Ç–æ', '—Å–º–æ—Ç—Ä–∏ —Ñ–æ—Ç–æ', '—Å–º –∫–∞—Ä—Ç–∏–Ω–∫—É', '—Å–º. –∫–∞—Ä—Ç–∏–Ω–∫—É', '—Å–º–æ—Ç—Ä–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É',
    'like the photo', 'as in the photo', 'see photo'
  ];
  const shouldSendPhoto = !!imagePath && triggers.some(t => hay.includes(t));

  console.log("üì§ –®–∞–±–ª–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°—Ç–∞—Ç—É—Å: –æ—Ç–ø—Ä–∞–≤–∫–∞...");

  try {
    if (shouldSendPhoto && fs.existsSync(imagePath)) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ Telegram —Å –ø–æ–¥–ø–∏—Å—å—é
      const form = new FormData();
      form.append('chat_id', process.env.DESTINATION_CHAT_ID);
      form.append('message_thread_id', parseInt(process.env.DESTINATION_THREAD_ID));
      form.append('caption', finalMessage);
      form.append('parse_mode', 'HTML');
      form.append('photo', fs.createReadStream(imagePath));

      const tgResponse = await axios.post(
        `https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendPhoto`,
        form,
        { headers: form.getHeaders() }
      );
      console.log("üì¨ –§–æ—Ç–æ+—à–∞–±–ª–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram:", tgResponse.status);
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
      const payload = {
        chat_id: process.env.DESTINATION_CHAT_ID,
        message_thread_id: parseInt(process.env.DESTINATION_THREAD_ID),
        text: finalMessage,
        parse_mode: 'HTML'
      };

      const tgResponse = await axios.post(
        `https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`,
        payload
      );
      console.log("üì¨ –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram:", tgResponse.status);
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", err.message);
  }

  if (imagePath && fs.existsSync(imagePath)) {
    fs.unlinkSync(imagePath);
  }
});

client.initialize();