from telethon import TelegramClient, events
import os
import json
from dotenv import load_dotenv
from pathlib import Path

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_path = Path(__file__).resolve().parent.parent / "telegram_bot" / ".env"
load_dotenv(dotenv_path=env_path)

api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
bot_token = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient("reg_bot_session", api_id, api_hash).start(bot_token=bot_token)

# –ü—É—Ç—å –∫ –±–∞–∑–µ
DB_PATH = os.path.join(os.path.dirname(__file__), 'users.json')

# üëâ –ü—É—Ç—å –∫ –±–∞–Ω–Ω–µ—Ä—É (–ø–æ–ª–æ–∂–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å—é–¥–∞: filters/assets/first_message.png)
BANNER_PATH = os.path.join(os.path.dirname(__file__), 'assets', 'first_message.png')

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
pending_users = {}

# –í–æ–ø—Ä–æ—Å—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
QUESTIONS = [
    ("sex", "–ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª? (–º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π)"),
    ("type", "üë§ –ö–∞–∫–æ–π —É –≤–∞—Å —Ç–∏–ø–∞–∂? (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å–ª–∞–≤—è–Ω—Å–∫–∏–π', '–≤–æ—Å—Ç–æ—á–Ω—ã–π', '–∞–∑–∏–∞—Ç—Å–∫–∏–π')"),
    ("age", "üìÜ –í–∞—à –∏–≥—Ä–æ–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç? (–û—Ç–º–µ—Ç—å—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω. –ù–∞–ø—Ä–∏–º–µ—Ä 20-25)"),
    ("height", "üìè –í–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö?"),
    ("body", "üèãÔ∏è –í–∞—à–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ? (—Å—Ç—Ä–æ–π–Ω–æ–µ, —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ, –ø–æ–ª–Ω–æ–µ –∏ —Ç.–ø.)"),
    ("location", "–ì–æ—Ä–æ–¥–∞ —Å –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å–∫–∞—Ç—å –∫–∞—Å—Ç–∏–Ω–≥–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ)")
]

# –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
if not os.path.exists(DB_PATH):
    with open(DB_PATH, 'w', encoding='utf-8') as f:
        json.dump({}, f, ensure_ascii=False, indent=2)

@client.on(events.NewMessage(pattern='/start'))
async def start_registration(event):
    user_id = str(event.sender_id)
    pending_users[user_id] = {}

    # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–µ—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å),
    # –∏–Ω–∞—á–µ ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç.
    caption = "üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∫–∞—Å—Ç–∏–Ω–≥–æ–≤."
    try:
        if os.path.exists(BANNER_PATH):
            await client.send_file(event.chat_id, BANNER_PATH, caption=caption)
        else:
            await event.respond(caption)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∞–Ω–Ω–µ—Ä: {e}")
        await event.respond(caption)

    await ask_next_question(event, user_id)

async def ask_next_question(event, user_id):
    user_data = pending_users.get(user_id, {})
    for key, question in QUESTIONS:
        if key not in user_data:
            await event.respond(question)
            return
    # –ï—Å–ª–∏ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–æ–±—Ä–∞–Ω—ã ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    try:
        with open(DB_PATH, 'r', encoding='utf-8') as f:
            users = json.load(f)
            if not isinstance(users, dict):
                users = {}
    except (json.JSONDecodeError, FileNotFoundError):
        users = {}

    users[user_id] = user_data
    with open(DB_PATH, 'w', encoding='utf-8') as f:
        json.dump(users, f, indent=2, ensure_ascii=False)

    await event.respond("‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°–ø–∞—Å–∏–±–æ!")
    pending_users.pop(user_id, None)

@client.on(events.NewMessage)
async def handle_response(event):
    if event.raw_text.startswith('/'):  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
        return

    user_id = str(event.sender_id)
    if user_id not in pending_users:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

    user_data = pending_users[user_id]
    for key, _ in QUESTIONS:
        if key not in user_data:
            user_data[key] = event.raw_text.strip()
            await ask_next_question(event, user_id)
            return

# ===== –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã: /profile (/me) –∏ /delete =====

@client.on(events.NewMessage(pattern=r'^/(profile|me)$'))
async def show_profile(event):
    user_id = str(event.sender_id)
    # —á–∏—Ç–∞–µ–º –±–∞–∑—É –ø—Ä–æ—Ñ–∏–ª–µ–π
    try:
        with open(DB_PATH, 'r', encoding='utf-8') as f:
            users = json.load(f)
            if not isinstance(users, dict):
                users = {}
    except (json.JSONDecodeError, FileNotFoundError):
        users = {}

    profile = users.get(user_id)
    if not profile:
        await event.respond("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        return

    sex = profile.get('sex', '‚Äî')
    typ = profile.get('type', '‚Äî')
    age = profile.get('age', '‚Äî')
    height = profile.get('height', '‚Äî')
    body = profile.get('body', '‚Äî')
    location = profile.get('location', '‚Äî')

    text = (
        "üßæ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"‚Ä¢ –ü–æ–ª: {sex}\n"
        f"‚Ä¢ –¢–∏–ø–∞–∂: {typ}\n"
        f"‚Ä¢ –ò–≥—Ä–æ–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: {age}\n"
        f"‚Ä¢ –†–æ—Å—Ç: {height}\n"
        f"‚Ä¢ –¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ: {body}\n"
        f"‚Ä¢ –ì–æ—Ä–æ–¥–∞: {location}\n\n"
        "–ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ."
    )
    await event.respond(text, parse_mode='markdown')

@client.on(events.NewMessage(pattern=r'^/(delete|remove)$'))
async def delete_profile(event):
    user_id = str(event.sender_id)
    # —á–∏—Ç–∞–µ–º –±–∞–∑—É
    try:
        with open(DB_PATH, 'r', encoding='utf-8') as f:
            users = json.load(f)
            if not isinstance(users, dict):
                users = {}
    except (json.JSONDecodeError, FileNotFoundError):
        users = {}

    if user_id in users:
        users.pop(user_id, None)
        with open(DB_PATH, 'w', encoding='utf-8') as f:
            json.dump(users, f, indent=2, ensure_ascii=False)
        await event.respond("üóë –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª—ë–Ω. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")
    else:
        await event.respond("‚ÑπÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ì–æ—Ç–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
client.run_until_disconnected()